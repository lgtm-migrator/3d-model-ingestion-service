openapi: 3.0.1
info:
  title: 3d model ingestion service
  description: Uploading new 3d models
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /models:
    post:
      operationId: createModel
      summary: Creates a new job and invokes a new model ingestion flow
      tags:
        - models
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payload'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '5XX':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  schemas:
    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    payload:
      type: object
      description: 3d model payload
      required:
        - modelPath
        - tilesetFilename
        - metadata
      properties:
        modelPath:
          type: string
          description: Model files location path
          example: '/home/libotadmin/NewYork'
        tilesetFilename:
          type: string
          description: Model tileset filename
          example: 'tileset.json'
        metadata:
          $ref: '#/components/schemas/metadata'
    model:
      type: object
      description: 3d model metadata for 3d model upload
      required:
        - modelPath
        - tilesetFilename
        - metadata
      properties:
        modelId:
          type: string
          format: uuid
          description: Ingestion model unique identifier
        jobId:
          type: string
          format: uuid
          description: Ingestion job unique identifier
        flowId:
          type: string
          format: uuid
          description: Ingestion flow unique identifier
        modelPath:
          type: string
          description: Model files location path
          example: '/home/libotadmin/NewYork'
        tilesetFilename:
          type: string
          description: Model tileset filename
          example: 'tileset.json'
        metadata:
          $ref: '#/components/schemas/metadata'
    metadata:
      type: object
      description: 3d tiles metadata payload
      required:
        - productName
        # - productVersion
        - productType
        - sourceDateStart
        - sourceDateEnd
        - maxAccuracyCE90
        - absoluteAccuracyLEP90
        - sensors
        - footprint
        - srsName
        - region
        - classification
        - productionSystem
        - productionSystemVer
        - producerName
      properties:
        productId:
          type: string
          nullable: true
          default: null
          description: ID of product
        productName:
          type: string
          maxLength: 50
          description: Name of product
        productVersion:
          type: integer
          example: 1
          description: Number of version
          readOnly: true
        productType:
          type: string
          description: Type of product (3DPhotoRealistic)
          example: 3DPhotoRealistic
        description:
          type: string
          maxLength: 250
          nullable: true
          description: description and comments
        creationDate: # What should I do? date-time: yyyy-mm-dd and required: dd-mm-yyyy
          type: string
          format: date-time
          nullable: true
          description: Creation date
        sourceDateStart: # What should I do? date-time: yyyy-mm-dd and required: dd-mm-yyyy
          type: string
          format: date-time
          description: Oldest date of taken photo
        sourceDateEnd: # What should I do? date-time: yyyy-mm-dd and required: dd-mm-yyyy
          type: string
          format: date-time
          description: Newest date of taken photo
        minResolutionMeter:
          type: number
          format: double
          nullable: true
          example: 1.1
          minimum: 0.01
          maximum: 8000
          description: Minimum resolution in meters
        maxResolutionMeter:
          type: number
          format: double
          nullable: true
          example: 1.5
          minimum: 0.01
          maximum: 8000
          description: Maximum resolution in meters
        nominalResolution:
          type: number
          format: double
          nullable: true
          example: 5
          minimum: 0
          description: Number of points in one size unit
        maxAccuracyCE90:
          type: number
          format: double
          minimum: 0
          description: Maximum absolute horizontal accuracy
        absoluteAccuracyLEP90:
          type: number
          format: double
          minimum: 0
          maximum: 999
          description: Absolute vertical accuracy
        accuracySE90:
          type: number
          format: double
          minimum: 0
          nullable: true
          maximum: 250
          description: Absolute spherical accuracy
        relativeAccuracyLEP90:
          type: number
          format: double
          nullable: true
          minimum: 0
          maximum: 100
          description: Relative vertical accuracy
        visualAccuracy:
          type: number
          format: double
          nullable: true
          minimum: 0
          maximum: 100
          description: Measure of visual quality
        sensors:
          type: string
          description: All sensors that took part as a source to the product
          default: 'OTHER'
        footprint:
          $ref: '#/components/schemas/GeojsonGeometryPolygon'
          description: Geographic demarkatetion of the product
        heightRangeFrom:
          type: number
          format: double
          nullable: true
          description: Minimum height range of ground
        heightRangeTo:
          type: number
          format: double
          nullable: true
          description: Maximum height range of ground
        srsId:
          type: integer
          example: 4326
          nullable: true
          description: ID of srs
        srsName:
          type: string
          description: Name of the srsID
        srsOrigin:
          type: string
          nullable: true
          example: (30;40;50)
          pattern: '^\(([-]?(0|[1-9]\d*)(\.\d+)?;){2}[-]?(0|[1-9]\d*)(\.\d+)?\)$'
          description: First of axes
        region:
          type: string
          description: States
        classification:
          type: string
          example: '"5"'
          pattern: '^[0-9]$'
          description: Classification of the product
        compartmentalization:
          type: string
          nullable: true
          description: compartmentalization of the product
        productionSystem:
          type: string
          description: Production system
        productionSystemVer:
          type: string
          maxLength: 20
          description: Version production system
        producerName:
          type: string
          description: The name of the producer (product owner)
        productionMethod:
          type: string
          nullable: true
          description: Method of the production
        minFlightAlt:
          type: number
          format: double
          description: Minimum height of the flight
        maxFlightAlt:
          type: number
          nullable: true
          format: double
          description: Maximum height of the flight
        geographicArea:
          type: string
          nullable: true
          description: Area inside the region
        productBoundingBox:
          type: string
          readOnly: true
          pattern: '^([-+]?(0|[1-9]\d*)(\.\d+)?,){3}[-+]?(0|[1-9]\d*)(\.\d+)?$'
          description: The bounding box of the product

    GeojsonGeometryPolygon:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            minItems: 5
            items:
              type: array
              minItems: 2
              items:
                type: number
      example: '{"type":"Polygon","coordinates":[[[1,2],[3,4],[5,6],[7,8],[1,2]]]}'
